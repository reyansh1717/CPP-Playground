
#include <iostream>
#include <vector>
#include <queue>

using namespace std;

void BFS(int start, const vector<vector<int>>& adj, int V) {
    // Mark all vertices as not visited
    vector<bool> visited(V, false);

    // Create a queue for BFS
    queue<int> q;

    // Mark the current node as visited and enqueue it
    visited[start] = true;
    q.push(start);

    while (!q.empty()) {
        // Dequeue a vertex from queue and print it
        int v = q.front();
        cout << v << " ";
        q.pop();

        // Get all adjacent vertices of the dequeued vertex v
        // If an adjacent vertex has not been visited, mark it visited and enqueue it
        for (int i : adj[v]) {
            if (!visited[i]) {
                visited[i] = true;
                q.push(i);
            }
        }
    }
}

int main() {
    int V = 5; // Number of vertices
    vector<vector<int>> adj(V);

    // Example graph
    adj[0] = {1, 2};
    adj[1] = {0, 3, 4};
    adj[2] = {0};
    adj[3] = {1};
    adj[4] = {1};

    cout << "Breadth First Traversal (starting from vertex 0):\n";
    BFS(0, adj, V);

    return 0;
}
